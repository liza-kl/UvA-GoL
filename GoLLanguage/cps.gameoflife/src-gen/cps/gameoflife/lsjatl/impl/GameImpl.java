/**
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.lsjatl.impl;

import cps.gameoflife.lsjatl.Game;
import cps.gameoflife.lsjatl.Grid;
import cps.gameoflife.lsjatl.LsjatlPackage;
import cps.gameoflife.lsjatl.Rules;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cps.gameoflife.lsjatl.impl.GameImpl#getGrid <em>Grid</em>}</li>
 *   <li>{@link cps.gameoflife.lsjatl.impl.GameImpl#getRules <em>Rules</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameImpl extends MinimalEObjectImpl.Container implements Game
{
  /**
   * The cached value of the '{@link #getGrid() <em>Grid</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGrid()
   * @generated
   * @ordered
   */
  protected Grid grid;

  /**
   * The cached value of the '{@link #getRules() <em>Rules</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRules()
   * @generated
   * @ordered
   */
  protected Rules rules;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LsjatlPackage.Literals.GAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Grid getGrid()
  {
    return grid;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetGrid(Grid newGrid, NotificationChain msgs)
  {
    Grid oldGrid = grid;
    grid = newGrid;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LsjatlPackage.GAME__GRID, oldGrid, newGrid);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setGrid(Grid newGrid)
  {
    if (newGrid != grid)
    {
      NotificationChain msgs = null;
      if (grid != null)
        msgs = ((InternalEObject)grid).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LsjatlPackage.GAME__GRID, null, msgs);
      if (newGrid != null)
        msgs = ((InternalEObject)newGrid).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LsjatlPackage.GAME__GRID, null, msgs);
      msgs = basicSetGrid(newGrid, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LsjatlPackage.GAME__GRID, newGrid, newGrid));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Rules getRules()
  {
    return rules;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRules(Rules newRules, NotificationChain msgs)
  {
    Rules oldRules = rules;
    rules = newRules;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LsjatlPackage.GAME__RULES, oldRules, newRules);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRules(Rules newRules)
  {
    if (newRules != rules)
    {
      NotificationChain msgs = null;
      if (rules != null)
        msgs = ((InternalEObject)rules).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LsjatlPackage.GAME__RULES, null, msgs);
      if (newRules != null)
        msgs = ((InternalEObject)newRules).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LsjatlPackage.GAME__RULES, null, msgs);
      msgs = basicSetRules(newRules, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LsjatlPackage.GAME__RULES, newRules, newRules));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LsjatlPackage.GAME__GRID:
        return basicSetGrid(null, msgs);
      case LsjatlPackage.GAME__RULES:
        return basicSetRules(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LsjatlPackage.GAME__GRID:
        return getGrid();
      case LsjatlPackage.GAME__RULES:
        return getRules();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LsjatlPackage.GAME__GRID:
        setGrid((Grid)newValue);
        return;
      case LsjatlPackage.GAME__RULES:
        setRules((Rules)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LsjatlPackage.GAME__GRID:
        setGrid((Grid)null);
        return;
      case LsjatlPackage.GAME__RULES:
        setRules((Rules)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LsjatlPackage.GAME__GRID:
        return grid != null;
      case LsjatlPackage.GAME__RULES:
        return rules != null;
    }
    return super.eIsSet(featureID);
  }

} //GameImpl
