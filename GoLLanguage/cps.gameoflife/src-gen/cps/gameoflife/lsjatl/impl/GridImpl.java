/**
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.lsjatl.impl;

import cps.gameoflife.lsjatl.Grid;
import cps.gameoflife.lsjatl.GridSize;
import cps.gameoflife.lsjatl.LsjatlPackage;
import cps.gameoflife.lsjatl.PopulatedCell;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Grid</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link cps.gameoflife.lsjatl.impl.GridImpl#getSize <em>Size</em>}</li>
 *   <li>{@link cps.gameoflife.lsjatl.impl.GridImpl#getPopulatedCells <em>Populated Cells</em>}</li>
 *   <li>{@link cps.gameoflife.lsjatl.impl.GridImpl#getPredefinedPatterns <em>Predefined Patterns</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GridImpl extends MinimalEObjectImpl.Container implements Grid
{
  /**
   * The cached value of the '{@link #getSize() <em>Size</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSize()
   * @generated
   * @ordered
   */
  protected GridSize size;

  /**
   * The cached value of the '{@link #getPopulatedCells() <em>Populated Cells</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPopulatedCells()
   * @generated
   * @ordered
   */
  protected EList<PopulatedCell> populatedCells;

  /**
   * The cached value of the '{@link #getPredefinedPatterns() <em>Predefined Patterns</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPredefinedPatterns()
   * @generated
   * @ordered
   */
  protected EList<String> predefinedPatterns;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GridImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LsjatlPackage.Literals.GRID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GridSize getSize()
  {
    return size;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSize(GridSize newSize, NotificationChain msgs)
  {
    GridSize oldSize = size;
    size = newSize;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, LsjatlPackage.GRID__SIZE, oldSize, newSize);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSize(GridSize newSize)
  {
    if (newSize != size)
    {
      NotificationChain msgs = null;
      if (size != null)
        msgs = ((InternalEObject)size).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - LsjatlPackage.GRID__SIZE, null, msgs);
      if (newSize != null)
        msgs = ((InternalEObject)newSize).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - LsjatlPackage.GRID__SIZE, null, msgs);
      msgs = basicSetSize(newSize, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LsjatlPackage.GRID__SIZE, newSize, newSize));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<PopulatedCell> getPopulatedCells()
  {
    if (populatedCells == null)
    {
      populatedCells = new EObjectContainmentEList<PopulatedCell>(PopulatedCell.class, this, LsjatlPackage.GRID__POPULATED_CELLS);
    }
    return populatedCells;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getPredefinedPatterns()
  {
    if (predefinedPatterns == null)
    {
      predefinedPatterns = new EDataTypeEList<String>(String.class, this, LsjatlPackage.GRID__PREDEFINED_PATTERNS);
    }
    return predefinedPatterns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LsjatlPackage.GRID__SIZE:
        return basicSetSize(null, msgs);
      case LsjatlPackage.GRID__POPULATED_CELLS:
        return ((InternalEList<?>)getPopulatedCells()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LsjatlPackage.GRID__SIZE:
        return getSize();
      case LsjatlPackage.GRID__POPULATED_CELLS:
        return getPopulatedCells();
      case LsjatlPackage.GRID__PREDEFINED_PATTERNS:
        return getPredefinedPatterns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LsjatlPackage.GRID__SIZE:
        setSize((GridSize)newValue);
        return;
      case LsjatlPackage.GRID__POPULATED_CELLS:
        getPopulatedCells().clear();
        getPopulatedCells().addAll((Collection<? extends PopulatedCell>)newValue);
        return;
      case LsjatlPackage.GRID__PREDEFINED_PATTERNS:
        getPredefinedPatterns().clear();
        getPredefinedPatterns().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LsjatlPackage.GRID__SIZE:
        setSize((GridSize)null);
        return;
      case LsjatlPackage.GRID__POPULATED_CELLS:
        getPopulatedCells().clear();
        return;
      case LsjatlPackage.GRID__PREDEFINED_PATTERNS:
        getPredefinedPatterns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LsjatlPackage.GRID__SIZE:
        return size != null;
      case LsjatlPackage.GRID__POPULATED_CELLS:
        return populatedCells != null && !populatedCells.isEmpty();
      case LsjatlPackage.GRID__PREDEFINED_PATTERNS:
        return predefinedPatterns != null && !predefinedPatterns.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (predefinedPatterns: ");
    result.append(predefinedPatterns);
    result.append(')');
    return result.toString();
  }

} //GridImpl
