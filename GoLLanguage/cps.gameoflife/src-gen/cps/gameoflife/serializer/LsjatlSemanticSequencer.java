/*
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.serializer;

import com.google.inject.Inject;
import cps.gameoflife.lsjatl.Condition;
import cps.gameoflife.lsjatl.Game;
import cps.gameoflife.lsjatl.Grid;
import cps.gameoflife.lsjatl.GridSize;
import cps.gameoflife.lsjatl.LsjatlPackage;
import cps.gameoflife.lsjatl.PopulatedCell;
import cps.gameoflife.lsjatl.Rule;
import cps.gameoflife.lsjatl.Rules;
import cps.gameoflife.services.LsjatlGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LsjatlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LsjatlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LsjatlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LsjatlPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case LsjatlPackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case LsjatlPackage.GRID:
				sequence_Grid(context, (Grid) semanticObject); 
				return; 
			case LsjatlPackage.GRID_SIZE:
				sequence_GridSize(context, (GridSize) semanticObject); 
				return; 
			case LsjatlPackage.POPULATED_CELL:
				sequence_PopulatedCell(context, (PopulatedCell) semanticObject); 
				return; 
			case LsjatlPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			case LsjatlPackage.RULES:
				sequence_Rules(context, (Rules) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (boolOp=BoolOp NCount=INT separator=Separator?)
	 * </pre>
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (grid=Grid rules=Rules)
	 * </pre>
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LsjatlPackage.Literals.GAME__GRID) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LsjatlPackage.Literals.GAME__GRID));
			if (transientValues.isValueTransient(semanticObject, LsjatlPackage.Literals.GAME__RULES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LsjatlPackage.Literals.GAME__RULES));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGameAccess().getGridGridParserRuleCall_0_0(), semanticObject.getGrid());
		feeder.accept(grammarAccess.getGameAccess().getRulesRulesParserRuleCall_1_0(), semanticObject.getRules());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GridSize returns GridSize
	 *
	 * Constraint:
	 *     (height=INT width=INT)
	 * </pre>
	 */
	protected void sequence_GridSize(ISerializationContext context, GridSize semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LsjatlPackage.Literals.GRID_SIZE__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LsjatlPackage.Literals.GRID_SIZE__HEIGHT));
			if (transientValues.isValueTransient(semanticObject, LsjatlPackage.Literals.GRID_SIZE__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LsjatlPackage.Literals.GRID_SIZE__WIDTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGridSizeAccess().getHeightINTTerminalRuleCall_3_1_0(), semanticObject.getHeight());
		feeder.accept(grammarAccess.getGridSizeAccess().getWidthINTTerminalRuleCall_3_4_0(), semanticObject.getWidth());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Grid returns Grid
	 *
	 * Constraint:
	 *     (size=GridSize populatedCells+=PopulatedCell*)
	 * </pre>
	 */
	protected void sequence_Grid(ISerializationContext context, Grid semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     PopulatedCell returns PopulatedCell
	 *
	 * Constraint:
	 *     (x=INT y=INT)
	 * </pre>
	 */
	protected void sequence_PopulatedCell(ISerializationContext context, PopulatedCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LsjatlPackage.Literals.POPULATED_CELL__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LsjatlPackage.Literals.POPULATED_CELL__X));
			if (transientValues.isValueTransient(semanticObject, LsjatlPackage.Literals.POPULATED_CELL__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LsjatlPackage.Literals.POPULATED_CELL__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPopulatedCellAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPopulatedCellAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (state=State conditions+=Condition+ result=Outcome)
	 * </pre>
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rules returns Rules
	 *
	 * Constraint:
	 *     rules+=Rule*
	 * </pre>
	 */
	protected void sequence_Rules(ISerializationContext context, Rules semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
