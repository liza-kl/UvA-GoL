/*
 * generated by Xtext 2.32.0
 */
grammar InternalLsjatl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package cps.gameoflife.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package cps.gameoflife.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import cps.gameoflife.services.LsjatlGrammarAccess;

}

@parser::members {

 	private LsjatlGrammarAccess grammarAccess;

    public InternalLsjatlParser(TokenStream input, LsjatlGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Game";
   	}

   	@Override
   	protected LsjatlGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGame
entryRuleGame returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGameRule()); }
	iv_ruleGame=ruleGame
	{ $current=$iv_ruleGame.current; }
	EOF;

// Rule Game
ruleGame returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getGridGridParserRuleCall_0_0());
				}
				lv_grid_0_0=ruleGrid
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					set(
						$current,
						"grid",
						lv_grid_0_0,
						"cps.gameoflife.Lsjatl.Grid");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGameAccess().getRulesRulesParserRuleCall_1_0());
				}
				lv_rules_1_0=ruleRules
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGameRule());
					}
					set(
						$current,
						"rules",
						lv_rules_1_0,
						"cps.gameoflife.Lsjatl.Rules");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleGrid
entryRuleGrid returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGridRule()); }
	iv_ruleGrid=ruleGrid
	{ $current=$iv_ruleGrid.current; }
	EOF;

// Rule Grid
ruleGrid returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGridAccess().getGridAction_0(),
					$current);
			}
		)
		otherlv_1='Grid'
		{
			newLeafNode(otherlv_1, grammarAccess.getGridAccess().getGridKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGridAccess().getSizeGridSizeParserRuleCall_2_0());
				}
				lv_size_2_0=ruleGridSize
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGridRule());
					}
					set(
						$current,
						"size",
						lv_size_2_0,
						"cps.gameoflife.Lsjatl.GridSize");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='PopulatedCells:'
		{
			newLeafNode(otherlv_3, grammarAccess.getGridAccess().getPopulatedCellsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getGridAccess().getPopulatedCellsPopulatedCellParserRuleCall_4_0());
				}
				lv_populatedCells_4_0=rulePopulatedCell
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGridRule());
					}
					add(
						$current,
						"populatedCells",
						lv_populatedCells_4_0,
						"cps.gameoflife.Lsjatl.PopulatedCell");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleGridSize
entryRuleGridSize returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGridSizeRule()); }
	iv_ruleGridSize=ruleGridSize
	{ $current=$iv_ruleGridSize.current; }
	EOF;

// Rule GridSize
ruleGridSize returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGridSizeAccess().getGridSizeAction_0(),
					$current);
			}
		)
		otherlv_1='GridSize:'
		{
			newLeafNode(otherlv_1, grammarAccess.getGridSizeAccess().getGridSizeKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getGridSizeAccess().getLeftParenthesisKeyword_2());
		}
		(
			otherlv_3='height:'
			{
				newLeafNode(otherlv_3, grammarAccess.getGridSizeAccess().getHeightKeyword_3_0());
			}
			(
				(
					lv_height_4_0=RULE_INT
					{
						newLeafNode(lv_height_4_0, grammarAccess.getGridSizeAccess().getHeightINTTerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGridSizeRule());
						}
						setWithLastConsumed(
							$current,
							"height",
							lv_height_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_5=','
			{
				newLeafNode(otherlv_5, grammarAccess.getGridSizeAccess().getCommaKeyword_3_2());
			}
			otherlv_6='width:'
			{
				newLeafNode(otherlv_6, grammarAccess.getGridSizeAccess().getWidthKeyword_3_3());
			}
			(
				(
					lv_width_7_0=RULE_INT
					{
						newLeafNode(lv_width_7_0, grammarAccess.getGridSizeAccess().getWidthINTTerminalRuleCall_3_4_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getGridSizeRule());
						}
						setWithLastConsumed(
							$current,
							"width",
							lv_width_7_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		otherlv_8=')'
		{
			newLeafNode(otherlv_8, grammarAccess.getGridSizeAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePopulatedCell
entryRulePopulatedCell returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPopulatedCellRule()); }
	iv_rulePopulatedCell=rulePopulatedCell
	{ $current=$iv_rulePopulatedCell.current; }
	EOF;

// Rule PopulatedCell
rulePopulatedCell returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getPopulatedCellAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				lv_x_1_0=RULE_INT
				{
					newLeafNode(lv_x_1_0, grammarAccess.getPopulatedCellAccess().getXINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPopulatedCellRule());
					}
					setWithLastConsumed(
						$current,
						"x",
						lv_x_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_2=','
		{
			newLeafNode(otherlv_2, grammarAccess.getPopulatedCellAccess().getCommaKeyword_2());
		}
		(
			(
				lv_y_3_0=RULE_INT
				{
					newLeafNode(lv_y_3_0, grammarAccess.getPopulatedCellAccess().getYINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPopulatedCellRule());
					}
					setWithLastConsumed(
						$current,
						"y",
						lv_y_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getPopulatedCellAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleRules
entryRuleRules returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRulesRule()); }
	iv_ruleRules=ruleRules
	{ $current=$iv_ruleRules.current; }
	EOF;

// Rule Rules
ruleRules returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRulesAccess().getRulesAction_0(),
					$current);
			}
		)
		otherlv_1='Rules'
		{
			newLeafNode(otherlv_1, grammarAccess.getRulesAccess().getRulesKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRulesAccess().getRulesRuleParserRuleCall_2_0());
				}
				lv_rules_2_0=ruleRule
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRulesRule());
					}
					add(
						$current,
						"rules",
						lv_rules_2_0,
						"cps.gameoflife.Lsjatl.Rule");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getBoolOpBoolOpParserRuleCall_0_0());
				}
				lv_boolOp_0_0=ruleBoolOp
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"boolOp",
						lv_boolOp_0_0,
						"cps.gameoflife.Lsjatl.BoolOp");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_NCount_1_0=RULE_INT
				{
					newLeafNode(lv_NCount_1_0, grammarAccess.getConditionAccess().getNCountINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getConditionRule());
					}
					setWithLastConsumed(
						$current,
						"NCount",
						lv_NCount_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getSeparatorSeparatorParserRuleCall_2_0());
				}
				lv_separator_2_0=ruleSeparator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"separator",
						lv_separator_2_0,
						"cps.gameoflife.Lsjatl.Separator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Each'
		{
			newLeafNode(otherlv_0, grammarAccess.getRuleAccess().getEachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getStateStateParserRuleCall_1_0());
				}
				lv_state_1_0=ruleState
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"state",
						lv_state_1_0,
						"cps.gameoflife.Lsjatl.State");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='cell'
		{
			newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getCellKeyword_2());
		}
		otherlv_3='with'
		{
			newLeafNode(otherlv_3, grammarAccess.getRuleAccess().getWithKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getConditionsConditionParserRuleCall_4_0());
				}
				lv_conditions_4_0=ruleCondition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					add(
						$current,
						"conditions",
						lv_conditions_4_0,
						"cps.gameoflife.Lsjatl.Condition");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_5='neighbors'
		{
			newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getNeighborsKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getResultOutcomeParserRuleCall_6_0());
				}
				lv_result_6_0=ruleOutcome
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"result",
						lv_result_6_0,
						"cps.gameoflife.Lsjatl.Outcome");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSeparator
entryRuleSeparator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSeparatorRule()); }
	iv_ruleSeparator=ruleSeparator
	{ $current=$iv_ruleSeparator.current.getText(); }
	EOF;

// Rule Separator
ruleSeparator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='&&'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSeparatorAccess().getAmpersandAmpersandKeyword_0());
		}
		    |
		kw='||'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSeparatorAccess().getVerticalLineVerticalLineKeyword_1());
		}
	)
;

// Entry rule entryRuleState
entryRuleState returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	iv_ruleState=ruleState
	{ $current=$iv_ruleState.current.getText(); }
	EOF;

// Rule State
ruleState returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='living'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStateAccess().getLivingKeyword_0());
		}
		    |
		kw='dead'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStateAccess().getDeadKeyword_1());
		}
	)
;

// Entry rule entryRuleBoolOp
entryRuleBoolOp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolOpRule()); }
	iv_ruleBoolOp=ruleBoolOp
	{ $current=$iv_ruleBoolOp.current.getText(); }
	EOF;

// Rule BoolOp
ruleBoolOp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOpAccess().getGreaterThanSignKeyword_0());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOpAccess().getLessThanSignKeyword_1());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOpAccess().getGreaterThanSignEqualsSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOpAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolOpAccess().getEqualsSignEqualsSignKeyword_4());
		}
	)
;

// Entry rule entryRuleOutcome
entryRuleOutcome returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOutcomeRule()); }
	iv_ruleOutcome=ruleOutcome
	{ $current=$iv_ruleOutcome.current.getText(); }
	EOF;

// Rule Outcome
ruleOutcome returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='survives'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutcomeAccess().getSurvivesKeyword_0());
		}
		    |
		kw='dies'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutcomeAccess().getDiesKeyword_1());
		}
		    |
		kw='populates'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOutcomeAccess().getPopulatesKeyword_2());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
