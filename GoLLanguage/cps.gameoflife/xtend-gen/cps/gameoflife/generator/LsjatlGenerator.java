/**
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.generator;

import com.google.common.base.Objects;
import cps.gameoflife.lsjatl.Condition;
import cps.gameoflife.lsjatl.Game;
import cps.gameoflife.lsjatl.PopulatedCell;
import cps.gameoflife.lsjatl.Rule;
import java.util.ArrayList;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LsjatlGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    final Game root = ((Game) _head);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package GameOfLife;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("import java.awt.Point;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.HashSet;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("public class RulesOfLife {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static int gridWidth = ");
    int _width = root.getGrid().getSize().getWidth();
    _builder.append(_width, "\t\t\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static int gridHeight = ");
    int _height = root.getGrid().getSize().getHeight();
    _builder.append(_height, "\t\t\t\t\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static HashSet<Point> Glider = new HashSet<Point>(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Arrays.asList(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("new Point(4,3), new Point(5,4), new Point(5,5), new Point(4,5), new Point(3,5)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static HashSet<Point> Blinker = new HashSet<Point>(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Arrays.asList(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("new Point(3,3), new Point(3,4), new Point(21,20), new Point(3,5)");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static ArrayList<Point> populatedCells;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static HashSet<Point> initialCells;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("static {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("initialCells = new HashSet<Point>(");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append("Arrays.asList(");
    _builder.newLine();
    {
      List<PopulatedCell> _startingPoints = Auxiliary.getStartingPoints(root.getGrid());
      boolean _hasElements = false;
      for(final PopulatedCell populatedCell : _startingPoints) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(", ", "\t\t\t\t\t\t\t\t\t\t\t\t\t");
        }
        _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t\t");
        _builder.append("new Point(");
        int _x = populatedCell.getX();
        _builder.append(_x, "\t\t\t\t\t\t\t\t\t\t\t\t\t");
        _builder.append(",");
        int _y = populatedCell.getY();
        _builder.append(_y, "\t\t\t\t\t\t\t\t\t\t\t\t\t");
        _builder.append(")");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(")");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t\t\t");
    _builder.append(");");
    _builder.newLine();
    {
      ArrayList<String> _pesets = Auxiliary.getPesets(root.getGrid());
      for(final String preset : _pesets) {
        _builder.append("\t\t\t\t\t\t");
        _builder.append("initialCells.addAll(");
        _builder.append(preset, "\t\t\t\t\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t\t\t");
    _builder.append("populatedCells = new ArrayList<>(initialCells);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("public static void computeSurvivors(boolean[][] gameBoard, ArrayList<Point> survivingCells) {");
    _builder.newLine();
    _builder.append("\t\t\t        \t");
    _builder.append("// Iterate through the array, follow game of life rules");
    _builder.newLine();
    _builder.append("\t\t\t       \t ");
    _builder.append("for (int i=1; i<gameBoard.length-1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("for (int j=1; j<gameBoard[0].length-1; j++) {");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("int surrounding = 0;");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i-1][j-1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i-1][j])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i-1][j+1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i][j-1])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i][j+1])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i+1][j-1]) { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i+1][j])   { surrounding++; }");
    _builder.newLine();
    _builder.append("\t\t\t                ");
    _builder.append("if (gameBoard[i+1][j+1]) { surrounding++; }");
    _builder.newLine();
    StringConcatenation _builder_1 = new StringConcatenation();
    {
      List<Rule> _rules = Auxiliary.getRules(root);
      for(final Rule rule : _rules) {
        CharSequence _rule2Text = LsjatlGenerator.rule2Text(rule);
        _builder_1.append(_rule2Text);
        _builder_1.newLineIfNotEmpty();
      }
    }
    String _plus = (_builder.toString() + _builder_1);
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    _builder_2.append("\t\t\t\t");
    _builder_2.append("}");
    _builder_2.newLine();
    String _plus_1 = (_plus + _builder_2);
    fsa.generateFile("RulesOfLife.java", _plus_1);
  }

  protected static CharSequence _rule2Text(final Rule rule) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("if ((");
    {
      String _state = rule.getState();
      boolean _equals = Objects.equal(_state, "dead");
      if (_equals) {
        _builder.append("!");
      }
    }
    _builder.append("gameBoard[i][j]) && ");
    _builder.newLineIfNotEmpty();
    {
      List<Condition> _conditions = Auxiliary.getConditions(rule);
      for(final Condition condition : _conditions) {
        _builder.append("(surrounding ");
        String _boolOp = condition.getBoolOp();
        _builder.append(_boolOp);
        _builder.append(" ");
        int _nCount = condition.getNCount();
        _builder.append(_nCount);
        _builder.append(") ");
        {
          String _separator = condition.getSeparator();
          boolean _equals_1 = Objects.equal(_separator, "||");
          if (_equals_1) {
            _builder.append("||");
          }
        }
        {
          String _separator_1 = condition.getSeparator();
          boolean _equals_2 = Objects.equal(_separator_1, "&&");
          if (_equals_2) {
            _builder.append("&&");
          }
        }
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      String _result = rule.getResult();
      boolean _equals_3 = Objects.equal(_result, "survives");
      if (_equals_3) {
        _builder.append("survivingCells.add(new Point(i-1,j-1));");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      String _result_1 = rule.getResult();
      boolean _equals_4 = Objects.equal(_result_1, "populates");
      if (_equals_4) {
        _builder.append("survivingCells.add(new Point(i-1,j-1));");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    {
      String _result_2 = rule.getResult();
      boolean _equals_5 = Objects.equal(_result_2, "dies");
      if (_equals_5) {
        _builder.append("Point pointToRemove = new Point(i, j);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("                \t\t");
        _builder.append("survivingCells.removeIf(point -> point.equals(pointToRemove));");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }

  public static CharSequence rule2Text(final Rule rule) {
    return _rule2Text(rule);
  }
}
