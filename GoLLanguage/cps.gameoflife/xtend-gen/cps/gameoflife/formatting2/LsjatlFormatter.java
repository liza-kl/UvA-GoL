/**
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.formatting2;

import com.google.inject.Inject;
import cps.gameoflife.lsjatl.Game;
import cps.gameoflife.lsjatl.Grid;
import cps.gameoflife.lsjatl.GridSize;
import cps.gameoflife.lsjatl.Rule;
import cps.gameoflife.lsjatl.Rules;
import cps.gameoflife.services.LsjatlGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;

@SuppressWarnings("all")
public class LsjatlFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private LsjatlGrammarAccess _lsjatlGrammarAccess;

  protected void _format(final Game game, @Extension final IFormattableDocument document) {
    document.<Grid>format(game.getGrid());
  }

  protected void _format(final Grid grid, @Extension final IFormattableDocument document) {
    document.<GridSize>format(grid.getSize());
  }

  protected void _format(final Rules rules, @Extension final IFormattableDocument document) {
    EList<Rule> _rules = rules.getRules();
    for (final Rule rule : _rules) {
      {
        document.<Rule>format(rule);
        final Procedure1<IHiddenRegionFormatter> _function = (IHiddenRegionFormatter it) -> {
          it.setNewLines(2);
        };
        document.<Rule>append(rule, _function);
      }
    }
  }

  public void format(final Object game, final IFormattableDocument document) {
    if (game instanceof XtextResource) {
      _format((XtextResource)game, document);
      return;
    } else if (game instanceof Game) {
      _format((Game)game, document);
      return;
    } else if (game instanceof Grid) {
      _format((Grid)game, document);
      return;
    } else if (game instanceof Rules) {
      _format((Rules)game, document);
      return;
    } else if (game instanceof EObject) {
      _format((EObject)game, document);
      return;
    } else if (game == null) {
      _format((Void)null, document);
      return;
    } else if (game != null) {
      _format(game, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(game, document).toString());
    }
  }
}
