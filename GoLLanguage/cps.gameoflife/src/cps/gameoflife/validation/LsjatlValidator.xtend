/*
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.validation

import org.eclipse.xtext.validation.Check
import cps.gameoflife.lsjatl.Grid
import cps.gameoflife.lsjatl.PopulatedCell
import cps.gameoflife.lsjatl.Game
import cps.gameoflife.lsjatl.Rule
import cps.gameoflife.lsjatl.Rules

import java.util.Arrays;
import java.util.List;


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class LsjatlValidator extends AbstractLsjatlValidator {
	
	@Check
	def checkIfInitialCellsAreInGrid(Grid grid) {
		
		for (PopulatedCell cell : grid.populatedCells)
		{
			if (cell.x > grid.size.width || cell.y > grid.size.height
				|| cell.x > grid.size.height || cell.y > grid.size.height
			) {
				error("Cell cannot be outside the grid", 
					null)
			}
		}
	}
	
	
	@Check
	def hasValidNeighborsToDie(Rules rules) {
		
		for (Rule rule : rules.rules)
		{
			val list = Arrays.asList('survives', 'dies' , 'populates');
			if (!list.contains(rule.result)) {
				error("Cell needs to have a valid outcome", 
					null)
			}
		}
	}
	
	@Check def doRulesExist(Rules rules) {
		if (rules.rules.size() == 0) {
			{warning("Game has no rules, so everyone and everything will die", null)}
		}
	}
		
}
