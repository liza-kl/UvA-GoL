/*
 * generated by Xtext 2.32.0
 */
package cps.gameoflife.validation

import org.eclipse.xtext.validation.Check
import cps.gameoflife.lsjatl.Grid
import cps.gameoflife.lsjatl.PopulatedCell
import cps.gameoflife.lsjatl.Game
import cps.gameoflife.lsjatl.Rule
import cps.gameoflife.lsjatl.Rules
import cps.gameoflife.lsjatl.Condition

import java.util.Arrays;
import java.util.List;
import java.util.HashSet
import cps.gameoflife.lsjatl.LsjatlPackage.Literals

/**
 * This class contains custom validation rules. 
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class LsjatlValidator extends AbstractLsjatlValidator {

	protected static val ISSUE_CODE_PREFIX = "cps.gameoflife.lsjatl.";
	public static val TOO_MANY_NEIGHBORS = ISSUE_CODE_PREFIX + "TooManyNeighbors";
	public static val INVALID_SIGN = ISSUE_CODE_PREFIX + "InvalidSign";
	public static val String INVALID_DUPLICATION = "InvalidDuplication";
	

	@Check
	def checkIfValidNumberOfNeighbors(Condition condition) {
		if (condition.NCount > 8) {
			error("Neighbors can not be greater than 8" ,Literals.CONDITION__NCOUNT)
		}
		if (condition.NCount < 0) {
			error("The number of neighbors cannot be negative", Literals.CONDITION__NCOUNT)

		}
	}

	@Check
	def checkIfInitialCellsAreInGrid(Grid grid) {
		for (PopulatedCell cell : grid.populatedCells) {
			if (cell.x > grid.size.width || cell.y > grid.size.height || cell.x > grid.size.height ||
				cell.y > grid.size.height) {
					// point to correct cell
				error("Cell cannot be outside the grid", Literals.GRID__POPULATED_CELLS);
			}
		}
	}

	@Check def doRulesExist(Rules rules) {
		if (rules.rules.size() == 0) {
			{
				warning("Game has no rules, so everyone and everything will die", null)
			}
		}
	}
	
	

	@Check
	def checkIdenticalRules(Rules rules) {
		var rulesList = rules.rules.toList();
		var ruleSet = new HashSet();

		for (rule : rulesList) {
			if (ruleSet.contains(rule)) {
				warning("There cannot be duplicate rules", Literals.RULES__RULES);
			} else {
				ruleSet.add(rule);
			}
		}
	}
	
	@Check
	def checkDeadSurviving(Rule rule) {

			if (rule.state == 'dead' && rule.result == 'survives'){
				warning("Game has no rules, so everyone and everything will die",
					Literals.RULE__STATE
				)
			}
	
	}
	
	@Check
	def checkLivingPopulating(Rule rule) {

			if (rule.state == 'living' && rule.result == 'populates'){
				warning("A living cell cannot be populated. Only dead cells can be populated.",
					Literals.RULE__STATE);
			
			
		}
	}
	
	@Check
	def checkDeadDying(Rule rule) {
		if (rule.state == 'dead' && rule.result == 'dies'){
			warning("A dead cell cannot die. How do you kill that which has no life?",
				Literals.RULE__STATE
			)
		}
	}
}
